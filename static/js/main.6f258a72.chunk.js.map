{"version":3,"sources":["redux/actions/index.js","redux/store.js","components/Map/Map.js","components/Kml-parser/KmlParser.js","App.js","reportWebVitals.js","index.js"],"names":["SET_KML","SET_POPUPSTATE","initialState","kml","popupState","store","createStore","state","action","type","payload","connect","MapContainer","center","zoom","TileLayer","url","attribution","onClick","dispatch","className","accept","onChange","e","preventDefault","target","files","text","then","DOMParser","parseFromString","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sUAAaA,EAAU,UACVC,EAAiB,iBCCxBC,EAAe,CACjBC,IAAK,GACLC,WAAY,IAgBDC,EAbDC,aAAY,WAAqC,IAAnCC,EAAkC,uDAA1BL,EAAcM,EAAY,uCAC1D,OAAOA,EAAOC,MACV,KAAKT,EACD,OAAO,2BAAIO,GAAX,IAAkBJ,IAAKK,EAAOE,UAClC,KAAKT,EACD,OAAO,2BAAIM,GAAX,IAAkBH,WAAYI,EAAOE,UACzC,QACI,OAAO,eAAIH,O,OCevB,IAMeI,eANS,SAACJ,GAAD,MAAY,CAClCJ,IAAKI,EAAMJ,OAKEQ,EA3Bf,YAA8B,IAAhBR,EAAe,EAAfA,IAKZ,OAL2B,uBAMzB,mCACI,eAACS,EAAA,EAAD,CAAcC,OAAQ,CAAC,kBAAmB,mBAAoBC,KAAM,EAApE,UACE,cAACC,EAAA,EAAD,CAAWC,IAAI,qDACjBC,YAAY,2EAGVd,GAAK,cAAC,IAAD,CAAiBA,IAAKA,IAE3B,wBAAQe,QAbE,WAChBb,EAAMc,SAAS,CAACV,KAAMR,EAAgBS,QAAS,YAYzC,gF,MCYV,IAIeC,eAJO,SAACJ,GAAD,MAAY,CAC9BH,WAAYG,EAAMH,cAGPO,EAjCf,YAA2C,IAAvBP,EAAsB,EAAtBA,WAiBhB,OAjBsC,8BAkBlC,sBAAKgB,UAAW,SAAWhB,EAA3B,UACI,qBAAKgB,UAAW,WAAahB,EACzBc,QAPM,WACdb,EAAMc,SAAS,CAACV,KAAMR,EAAgBS,QAAS,QAQ3C,qBAAKU,UAAW,SAAWhB,EAA3B,SACI,uBAAOK,KAAK,OAAOY,OAAO,OAAOC,SAtB1B,SAACC,GAChBA,EAAEC,iBACCD,EAAEE,OAAOC,MAAM,KACdH,EAAEE,OAAOC,MAAM,GAAGC,OAAOC,MAAK,SAAAD,GAC1B,IACIxB,GADS,IAAI0B,WACAC,gBAAgBH,EAAM,YACvCtB,EAAMc,SAAS,CAACV,KAAMT,EAASU,QAASP,OAE5CE,EAAMc,SAAS,CAACV,KAAMR,EAAgBS,QAAS,iBCD5CqB,MATf,WACE,OACE,sBAAKX,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAD,CAAUpC,MAAOA,EAAjB,SACE,cAAC,IAAMqC,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6f258a72.chunk.js","sourcesContent":["export const SET_KML = 'set_kml'\r\nexport const SET_POPUPSTATE = 'set_popupstate'","import { createStore } from 'redux';\r\nimport { SET_KML, SET_POPUPSTATE }  from './actions';\r\nconst initialState = {\r\n    kml: '',\r\n    popupState: ''\r\n}\r\n\r\nconst store = createStore(( state = initialState, action ) => {\r\n    switch(action.type){\r\n        case SET_KML:\r\n            return {...state, kml: action.payload}\r\n        case SET_POPUPSTATE:\r\n            return {...state, popupState: action.payload}\r\n        default:\r\n            return {...state}\r\n\r\n    }\r\n})\r\n\r\n\r\nexport default store;","import 'leaflet/dist/leaflet.css';\r\nimport './Map.css';\r\nimport { MapContainer, TileLayer } from 'react-leaflet';\r\nimport ReactLeafletKml from 'react-leaflet-kml';\r\nimport { connect } from 'react-redux'\r\nimport store from '../../redux/store';\r\nimport { SET_POPUPSTATE } from '../../redux/actions';\r\n\r\nfunction Map({kml, ...props}){\r\n  let handleClick = () => {\r\n    store.dispatch({type: SET_POPUPSTATE, payload: 'active'})\r\n  }\r\n\r\n  return (\r\n    <>\r\n        <MapContainer center={[47.88522958293111, 65.67886776973104]} zoom={5}>\r\n          <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n        />\r\n        {\r\n          kml&&<ReactLeafletKml kml={kml} />\r\n        }\r\n          <button onClick={handleClick}>Загрузить Kml</button>\r\n        </MapContainer>\r\n        \r\n      </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  kml: state.kml\r\n})\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Map);","import './KmlParser.css';\r\nimport { SET_KML, SET_POPUPSTATE } from '../../redux/actions';\r\nimport store from '../../redux/store';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction KmlParser({popupState, ...props}){\r\n    let handleChange = (e) => {\r\n        e.preventDefault();\r\n        if(e.target.files[0]){\r\n            e.target.files[0].text().then(text=>{\r\n                let parser = new DOMParser();\r\n                let kml = parser.parseFromString(text, 'text/xml')\r\n                store.dispatch({type: SET_KML, payload: kml})\r\n            })\r\n            store.dispatch({type: SET_POPUPSTATE, payload: ''})\r\n        }\r\n    }\r\n\r\n    let handleClick = () => {\r\n        store.dispatch({type: SET_POPUPSTATE, payload: ''})\r\n    }\r\n\r\n    return (\r\n        <div className={\"outer \" + popupState}>\r\n            <div className={\"overlay \" + popupState} \r\n                onClick={handleClick}>\r\n            </div>\r\n            <div className={\"popup \" + popupState}>\r\n                <input type=\"file\" accept=\".kml\" onChange={handleChange}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    popupState: state.popupState\r\n})\r\n\r\nexport default connect(mapStateToProps)(KmlParser);","import './App.css';\nimport Map from './components/Map/Map';\nimport KmlParser from './components/Kml-parser/KmlParser';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map />\n      <KmlParser />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>   \n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}